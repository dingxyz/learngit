1. 下载git 并安装

在开始菜单里找到“Git”->“Git Bash”， 打开命令行， 则安装成功

2. 配置名字  邮箱
$ git config --global user.name "tom tom"
$ git config --global user.email "abac26363@gmail.com"

创建文件夹
$ mkdir learngit

进入文件夹
$ cd learngit

查看当前文件路径
$ pwd

把当前目录变为可管理目录
git init

在 learngit（该仓库） 下创建文件

添加 文件 到git缓存区 （该文件必须在当前目录下存在）
git add readme.txt  （文件名）    git add . (缓存当前目录下所有文件的提交)

查看状态用的 （看是否有需要修改的）
git status

提交 缓存区所有文件 到git仓库
并加上 本次提交的说明：一定要有意义，（不要写中文） 方便后期寻找
git commit -m "wrote a git file"

查看哪些文件哪些改动了
git diff readme.txt  （文件名）

显示提交日志
git log --pretty=oneline （可以不加后面的参数 更详细）

跳到某个版本  （版本号）
git reset --hard 1094a

查看命令历史
git reflog

丢弃工作区的修改或删除 （加到缓存区的不行  需要回退）
git checkout -- 文件名

第1步: 看本地用户主目录（cd ~）下有没有 .ssh目录 目录下有没有id_rsa和id_rsa.pub这两个文件
没有的话在Windows下打开Git Bash
ssh-keygen -t rsa -C "邮箱"    然后一路回车

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

本地的仓库与远程关联
git remote add origin git@github.com:dingxyz/learngit.git

本地库推送到远程  （确定工作区已经提交到本地库了） （第一次提交会问你 输yes）
git push origin master


如果从零开发 更建议先创建远程库 再从远程库克隆
创建远程库 （下面方框打勾！！！ 有.md文件）

从远程库克隆一个本地库 使用ssh(更快) 或 https
git clone git@github.com:dignxyz/learngit.git

切换到master分支：
$ git switch master

切换分支
git checkout name  或  git switch name

查看命令（工作区是干净的， 不要让工作区不干净）
git stash list

2. 创建分支 并 切换到该分支
$ git checkout -b dev  或   $ git switch -c dev

将分支合并到 master (此时须在 主分支上)
git merge dev (这种方式合并后不会留下历史记录)

合并分支的另一种方式 (带--no-ff  带合并信息)
$ git merge --no-ff -m "merge with no-ff" dev

删除分支
git branch -d dev

强行删除没有合并的分支(少用)
git branch -D 分支名

查看当前分支
git branch

查看工作区是否干净
git status

临时存储工作区的内容 (隐藏掉)
git stash
将临时存储的内容恢复
git stash pop

复制一个特定的提交到当前分支
git cherry-pick 4c805e2   (后面是提交时的 版本号)

如果代码冲突 , 应该先解决冲突再 提交
注意: master应该是非常稳定的, 仅用来发布新版本, 不能在这上面干活
      每个人都应该在dev分支上干活, 每个人都有自己的分支,时不时合并到dev上
      如果开发新功能, 最好新建一个分支

Bug修复: 隐藏当前工作区  创建bug修复分支  修bug  保存并提交(记住提交的版本号)
          合并bug分支 恢复工作区   想要其他分支的相同bug也修复  需要复制一个特定的提交到当前分支

查看远程仓库信息
git remote   (追加 -v 可查看 抓取和推送的地址, 如果没有推送权限 就看不到push地址 )

推送本地分支到远程仓库   (bug分支就没必要推到远程了, feature分支是否推到远程,取决于是否和其他伙伴合作开发)
git push origin master  (主分支要及时与远程同步)
git push origin dev   (开发分支 也需要与远程同步)


多人协作:










